name: Package and Publish to Visual Studio Marketplace

on:
  push:
    branches:
      - '*'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v3
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '16'

      - name: Set Git configuration
        run: |
            git config user.name "${GITHUB_ACTOR}"
            git config user.email "${GITHUB_ACTOR}@bots.github.com"

      - name: Install dependencies
        run: npm install

      - name: Extract extensionPack from package.json
        run: |
          # Get the "extensionPack" section from package.json and save it in a file
          node -p "JSON.stringify(require('./package.json').extensionPack, null, 2)" > extensionPack.json
          # Output the contents of extensionPack.json to the build log
          #cat extensionPack.json

      - name: Update README.md
        run: |
          awk -v content="$(cat extensionPack.json)" '
            /<!-- EXTENSION_PACK_START -->/, /<!-- EXTENSION_PACK_END -->/ {
              if (/<!-- EXTENSION_PACK_START -->/) {
                print "<!-- EXTENSION_PACK_START -->"
                print content
                print "<!-- EXTENSION_PACK_END -->"
              }
              next
            }
            { print }
          ' README.md > README.md.new && mv README.md.new README.md
      
      - name: Check for uncommitted changes
        run: |
          git status
          git diff-index --quiet HEAD || git commit -am "chore: Auto-commit before CI"

      - name: Bump version and create Git tag
        id: version
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get the current branch name
          BRANCH=$(git branch --show-current)

          # Get the current version number
          CURRENT_VERSION=$(jq -r '.version' package.json)

          # Check if it's the master branch or not
          if [ "$BRANCH" == "master" ] || [ "$BRANCH" == "main" ]; then
            # For the master branch, bump a minor version
            npm version minor
          else
            # For non-master branches, create a pre-release version
            npm version patch
          fi

          # Get the updated version number
          NEW_VERSION=$(jq -r '.version' package.json)

          # Push the new tag to GitHub
          git push --follow-tags origin $BRANCH

          echo "CURRENT_VERSION=$CURRENT_VERSION"
          echo "NEW_VERSION=$NEW_VERSION"
          echo "current-version=$CURRENT_VERSION" >> $GITHUB_OUTPUT
          echo "new-version=$NEW_VERSION" >> $GITHUB_OUTPUT

      - name: Install vsce CLI
        run: npm install -g @vscode/vsce

      - name: Build extension and create VSIX package
        run: vsce package
  
      - name: Publish to Visual Studio Marketplace
        env:
            PERSONAL_ACCESS_TOKEN: ${{ secrets.VS_MARKETPLACE_PAT }}
        run: |
            echo "CURRENT_VERSION=${{ steps.version.outputs.current-version }}"
            echo "NEW_VERSION=${{ steps.version.outputs.new-version }}"

            # Extract the major and minor version numbers before and after the version bump
            CURRENT_MAJOR=$(echo ${{ steps.version.outputs.current-version }} | cut -d. -f1)
            CURRENT_MINOR=$(echo ${{ steps.version.outputs.current-version }} | cut -d. -f2)

            NEW_MAJOR=$(echo ${{ steps.version.outputs.new-version }} | cut -d. -f1)
            NEW_MINOR=$(echo ${{ steps.version.outputs.new-version }} | cut -d. -f2)

            # Compare the version numbers to determine if it's a pre-release or a full release
            if [ "$NEW_MAJOR" != "$CURRENT_MAJOR" ] || [ "$NEW_MINOR" != "$CURRENT_MINOR" ]; then
              # For full release versions (major or minor version changed), publish normally
              echo "Publishing full release version - ${{ steps.version.outputs.new-version }}"
              vsce publish -p $PERSONAL_ACCESS_TOKEN
            else
              # For pre-release versions (only patch version changed), publish as pre-release
              echo "Publishing pre-release version - ${{ steps.version.outputs.new-versionn }}"
              vsce publish --pre-release -p $PERSONAL_ACCESS_TOKEN
            fi