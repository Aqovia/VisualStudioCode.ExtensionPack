name: CI

on:
  push:
    branches:
      - '*'

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v2
        with:
          fetch-depth: 0

      - name: Setup Node.js
        uses: actions/setup-node@v2
        with:
          node-version: '14'

      - name: Set Git configuration
        run: |
            git config user.name "${GITHUB_ACTOR}"
            git config user.email "${GITHUB_ACTOR}@bots.github.com"

      - name: Install dependencies
        run: npm install

      - name: Run tests
        run: npm test

      - name: Bump version and create Git tag
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        run: |
          # Get the current branch name
          BRANCH=$(git branch --show-current)

          # Get the current version number
          CURRENT_VERSION=$(npm version)

          # Check if it's the master branch or not
          if [ "$BRANCH" == "master" ]; then
            # For the master branch, bump a minor version
            npm version minor
          else
            # For non-master branches, create a pre-release version
            npm version patch
          fi

          # Get the updated version number
          NEW_VERSION=$(npm version)

          # Push the new tag to GitHub
          git push --follow-tags origin $BRANCH

          echo "CURRENT_VERSION=$CURRENT_VERSION"
          echo "NEW_VERSION=$NEW_VERSION"
          export CURRENT_VERSION=$CURRENT_VERSION
          export NEW_VERSION=$NEW_VERSION

      - name: Install vsce CLI
        run: npm install -g @vscode/vsce

      - name: Build extension and create VSIX package
        run: vsce package
  
      - name: Publish to Visual Studio Marketplace
        env:
            PERSONAL_ACCESS_TOKEN: ${{ secrets.VS_MARKETPLACE_PAT }}
        run: |
            echo "CURRENT_VERSION=$CURRENT_VERSION"
            echo "NEW_VERSION=$NEW_VERSION"

            # Extract the major and minor version numbers before and after the version bump
            CURRENT_MAJOR=$(echo $CURRENT_VERSION | cut -d. -f1)
            CURRENT_MINOR=$(echo $CURRENT_VERSION | cut -d. -f2)

            NEW_MAJOR=$(echo $NEW_VERSION | cut -d. -f1)
            NEW_MINOR=$(echo $NEW_VERSION | cut -d. -f2)

            # Compare the version numbers to determine if it's a pre-release or a full release
            if [ "$NEW_MAJOR" != "$CURRENT_MAJOR" ] || [ "$NEW_MINOR" != "$CURRENT_MINOR" ]; then
              # For full release versions (major or minor version changed), publish normally
              echo "Publishing full release version - $NEW_VERSION"
              vsce publish -p $PERSONAL_ACCESS_TOKEN
            else
              # For pre-release versions (only patch version changed), publish as pre-release
              echo "Publishing pre-release version - $NEW_VERSION"
              vsce publish --pre-release -p $PERSONAL_ACCESS_TOKEN
            fi